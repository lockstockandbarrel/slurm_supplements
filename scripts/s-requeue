#!/bin/bash
###############################################################################
#@(#) (STATE-JOB) :HW: requeue Slurm jobs
###############################################################################
function PARSE(){
# Note that we use "$@" to let each command-line parameter expand to a separate word.
# The quotes around "$@" are essential!
# We need TEMP as the 'eval set --' would nuke the return value of getopt.
TEMP=$(getopt -o 'hvuHVSib:c::' --long 'help,version,usage,hold,verbose,holdspecial,incomplete,b-long:,c-long::' -n "$(basename $0)" -- "$@")

if [ $? -ne 0 ]; then
        echo 'Terminating...' >&2
        exit 1
fi

# Note the quotes around "$TEMP": they are essential!
eval set -- "$TEMP"
unset TEMP
export HOLD=FALSE VERBOSE=FALSE HOLDSPECIAL=FALSE INCOMPLETE=
while true; do
        case "$1" in
                '-h'|'--help')    shift;    HELP;    exit ;;
                '-v'|'--version') shift;    VERSION; exit ;;
                '-u'|'--usage')   shift;    USAGE;   exit ;;

                '-V'|'--verbose')       shift;    VERBOSE=TRUE;          continue ;;
                '-H'|'--hold')          shift;    HOLD=TRUE;             continue ;;
                '-S'|'--holdspecial')   shift;    HOLDSPECIAL=TRUE;      continue ;;
                '-i'|'--incomplete')    shift;    INCOMPLETE=Incomplete; continue ;;

                '-b'|'--b-long')  shift 2
                        echo "Option b, argument '$2'"
                        continue
                ;;
                '-c'|'--c-long')
                        # c has an optional argument. As we are in quoted mode,
                        # an empty parameter will be generated if its optional
                        # argument is not found.
                        case "$2" in
                                '')
                                        echo 'Option c, no argument'
                                ;;
                                *)
                                        echo "Option c, argument '$2'"
                                ;;
                        esac
                        shift 2
                        continue
                ;;
                '--')
                        shift
                        break
                ;;
                *)
                        echo 'Internal error!' >&2
                        exit 1
                ;;
        esac
done

# Remaining arguments:
OTHER=''
for arg; do
        OTHER="$OTHER $arg"
done
OTHER=$(TRIM $OTHER)
}
###############################################################################
function HELP(){
TTY=${TTY:-$(tty --silent||echo FALSE && echo TRUE)}
HELPCAT <<\EOF
NAME
    s-requeue(1) - requeue Slurm jobs.
SYNOPSIS
    s-requeue [--hold|--holdspecial] [--incomplete] [--verbose] JOBIDS

    s-requeue --help| --version | --usage
DESCRIPTION
    Requeue a running, suspended or finished Slurm batch job into
    a pending state. 

    The simplest JOBIDS argument is a comma separated list of job
    IDs. Ultimately a form of the following command is executed:

        scontrol requeuehold [Incomplete|State=SpecialExit] JOBIDS

OPTIONS
   JOBIDS         Job IDs to requeue to a pending state. It may either
		  be a list of job numbers, a joblist, or an extended
		  regular expression that will result in jobs matched
		  to the output of

		      "scontrol --oneliner show job"

		  being requeued.

   --hold,H       The job is first put into a pending state, but
                  moreover the job is put in a held state.

                  Note a held job can be released using 

                     scontrol release <job_id>"). 

   --holdspecial,S  The same as --hold, but sets the state value to
                    "JOB_SPECIAL_EXIT". It is equivalent to

                  The "scontrol show --details job" command will display
                  the JobState as SPECIAL_EXIT, while the "squeue"
                  command displays it by default as "SE".

   --incomplete,I  Operate only on jobs (or tasks of a job array) which have
                   not completed. Specifically only jobs in the following
                   states will be requeued: CONFIGURING, RUNNING, STOPPED or
                   SUSPENDED.

   --verbose,V   verbose mode

   --help        display this help and exit
   --version     output version information and exit
   --usage       display condensed description of options
EXAMPLES
 Common usage:

      s-requeue  100
      #
      s-requeue --hold 101

      # requeue jobs whose jobdescription matches the two expressions
      # as seen in "scontrol --oneliner show jobs"
      s req 'UserId=root|Partition=express'

SEE ALSO

   + scontrol(1)
   + https://slurm.schedmd.com/documentation.html
EOF
}
###############################################################################
function USAGE(){
cat <<\EOF
   JOBIDS          job IDS to requeue to a pending state.
   --hold,H        hold job after requeue
   --holdspecial,S hold job after requeue

   --help,h     display this help and exit
   --version,v  output version information and exit
   --usage,u    display condensed description of options
EOF
}
###############################################################################
function VERSION(){
cat <<\EOF
PRODUCT:        Slurm tools
PROGRAM:        s-requeue
DESCRIPTION:    requeue Slurm jobs
VERSION:        1.0, 2023-12-29
AUTHOR:         John S. Urban
REPORTING BUGS: http://www.urbanjost.altervista.org/
HOME PAGE:      http://www.urbanjost.altervista.org/index.html
LICENSE:        MIT
EOF
}
###############################################################################
# main
source $(dirname $0)/.functions
PARSE "$@"
if [ "$VERBOSE" = TRUE ]
then
cat 1>&2 <<EOF
--------------------------------------------------------------------------------
<INFO>$0:
<INFO>VERBOSE:     $VERBOSE
<INFO>INCOMPLETE:  $INCOMPLETE
<INFO>HOLD:        $HOLD
<INFO>HOLDSPECIAL: $HOLDSPECIAL
<INFO>JOBS:        $OTHER
--------------------------------------------------------------------------------
EOF
fi

if [ "$OTHER" = "" ]
then
   echo "<WARNING>"
   echo "<WARNING>$0: no jobids to requeue specified"
   echo "<WARNING>"
   squeue
   echo "<WARNING>"
   echo "<WARNING>$0: no jobids to requeue specified"
   echo "<WARNING>"
elif [ "$HOLDSPECIAL" = "TRUE" ]
then
   EXPAND_MATCH_TO_JOBS
   [ "$OTHER" != '' ] && EXE scontrol requeuehold $INCOMPLETE State=SpecialExit  $OTHER     # re-queue and hold pending
   [ "$OTHER" != '' ] && EXE scontrol hold $OTHER                                           # if jobs were already pending put on hold as well
elif [ "$HOLD" = "TRUE" ]
then
   EXPAND_MATCH_TO_JOBS
   [ "$OTHER" != '' ] && EXE scontrol requeuehold $INCOMPLETE $OTHER     # re-queue and hold a batch
   [ "$OTHER" != '' ] && EXE scontrol hold $OTHER                        # if jobs were already pending put on hold as well
else
   EXPAND_MATCH_TO_JOBS
   [ "$OTHER" != '' ] && EXE scontrol requeue $INCOMPLETE $OTHER         # re-queue a batch job
fi
#############################################################################t
exit
#############################################################################t
